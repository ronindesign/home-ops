=== 2025-09-12 ===

# Dragonfly Database Deployment

## Dragonfly Deployment Complete

**Files Created:**
- `kubernetes/components/repos/dragonfly/` - HelmRepository component for DragonflyDB operator
- `kubernetes/apps/database/dragonfly/ks.yaml` - Dual Kustomization (operator + cluster)
- `kubernetes/apps/database/dragonfly/operator/app/kustomization.yaml` - Operator app-level manifest
- `kubernetes/apps/database/dragonfly/operator/app/helmrelease.yaml` - Operator HelmRelease configuration
- `kubernetes/apps/database/dragonfly/cluster/app/kustomization.yaml` - Cluster app-level manifest
- `kubernetes/apps/database/dragonfly/cluster/app/cluster.yaml` - Dragonfly custom resource

**Files Modified:**
- `kubernetes/apps/database/kustomization.yaml` - Added dragonfly HelmRepository component and enabled dragonfly deployment
- `kubernetes/apps/default/paperless-ngx/app/externalsecret.yaml` - Updated Redis URL to use Dragonfly service

**Key Components:**

### Dragonfly Operator
- **HelmRelease:** `dragonfly-operator` (v1.2.1)
- **Chart:** `dragonfly-operator` from official DragonflyDB repository (`https://dragonflydb.github.io/dragonfly-operator`)
- **Resources:** 100m CPU / 128Mi memory (requests), 500m CPU / 512Mi memory (limits)
- **Deployment:** Single replica operator managing Dragonfly clusters

### Dragonfly Cluster
- **Custom Resource:** `Dragonfly` kind with name `dragonfly`
- **Image:** `ghcr.io/dragonflydb/dragonfly:v1.23.1`
- **Configuration:**
  - 3 replicas for high availability
  - 2Gi memory limit with 1000m CPU
  - 2 proactor threads for performance
  - Emulated cluster mode for Redis compatibility
  - Default service on port 6379

### Paperless-NGX Integration
- **Redis URL:** `redis://dragonfly.database.svc.cluster.local:6379/0`
- **Service Discovery:** Cross-namespace communication (default â†’ database)
- **Compatibility:** Full Redis protocol compatibility with DragonflyDB
- **Performance:** High-performance alternative to Redis for background tasks and caching

**Deployment Order:**
1. **Dragonfly Operator** deploys first via HelmRelease
2. **Dragonfly Cluster** waits for operator readiness with health checks
3. **Paperless-NGX** connects to DragonflyDB service
4. **Background tasks** and caching now functional with improved performance

**Benefits:**
- Redis-compatible high-performance in-memory database
- Better memory efficiency than Redis
- Simplified deployment via Kubernetes operator
- Centralized caching service for multiple applications
- Improved paperless-ngx performance for document processing

**Suggested Commit Message:**
```
feat(dragonfly): Add DragonflyDB as Redis-compatible database service

- Deploy DragonflyDB operator v1.2.1 to database namespace
- Create 3-replica Dragonfly cluster with 2Gi memory allocation
- Add HelmRepository component for DragonflyDB operator charts
- Configure paperless-ngx to use Dragonfly instead of embedded Redis
- Enable cross-namespace service discovery for database services
```

---

# Paperless-NGX Document Management System Deployment

## Paperless-NGX Deployment Complete

**Files Created:**
- `kubernetes/apps/default/paperless-ngx/ks.yaml` - Flux Kustomization CRD with rook-ceph dependency
- `kubernetes/apps/default/paperless-ngx/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/paperless-ngx/app/helmrelease.yaml` - HelmRelease with paperless-ngx v2.8.6
- `kubernetes/apps/default/paperless-ngx/app/pvc.yaml` - Three rook-ceph PVCs (data: 50Gi, media: 50Gi, consume: 10Gi)
- `kubernetes/apps/default/paperless-ngx/app/externalsecret.yaml` - OnePassword integration for secrets

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added paperless-ngx to resources list

**Key Features:**
- Deployed paperless-ngx v2.8.6 for document management
- Configured rook-ceph storage with total 110Gi capacity (data: 50Gi, media: 50Gi, consume: 10Gi)
- PostgreSQL database integration via CloudNativePG
- Redis support for background tasks and caching
- OCR with English language support enabled
- External secrets integration with OnePassword for secure credential management
- Internal ingress configured at `docs.${SECRET_DOMAIN}`
- Resource allocation: 1000m CPU request, 256Mi-2Gi memory
- Security context optimized for document processing
- Auto-initialization of PostgreSQL database and user

**Configuration Details:**
- Admin user: `admin` with password from OnePassword
- Database: `paperless-ngx` on shared PostgreSQL cluster
- Redis connection for background task processing
- OCR languages configured for English documents
- Document consumption directory monitoring enabled
- Media and data directories with persistent storage

**OnePassword Requirements:**
- `paperless-ngx` vault: `PAPERLESS_SECRET_KEY`, `PAPERLESS_ADMIN_PASSWORD`, `PAPERLESS_POSTGRES_USER`, `PAPERLESS_POSTGRES_PASS`
- `cloudnative-pg` vault: Database initialization credentials

**Suggested Commit Message:**
```
feat(paperless-ngx): Add document management system

- Deploy paperless-ngx v2.8.6 to default namespace
- Configure rook-ceph storage with 110Gi total capacity
- Integrate with PostgreSQL and Redis via external secrets
- Enable internal ingress with SECRET_DOMAIN variable
- Add dependency on rook-ceph-cluster for storage
```

---

# Homebox Asset Management Deployment

## Homebox Deployment Complete

**Files Created:**
- `kubernetes/apps/default/homebox/ks.yaml` - Flux Kustomization CRD
- `kubernetes/apps/default/homebox/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/homebox/app/helmrelease.yaml` - HelmRelease with Homebox configuration
- `kubernetes/apps/default/homebox/app/pvc.yaml` - PersistentVolumeClaim for data storage

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added homebox to resources list (pending)

**Key Features:**
- Uses GitOps patterns consistent with existing repository structure
- Adapted TrueNAS export values (v0.10.3) to app-template chart format
- Configured Homebox environment variables for asset management
- Auto-increment asset IDs enabled
- Registration disabled for security
- Max upload size set to 10MB
- Persistent storage for data directory (/data)
- EmptyDir volume for config directory
- Internal ingress with external DNS annotation
- Security context with non-root user (568:568)
- Resource limits configured (500Mi memory limit)

**Next Steps:**
1. Update `kubernetes/apps/default/kustomization.yaml` to include homebox/ks.yaml
2. Commit and push changes
3. Flux will reconcile and deploy Homebox
4. Application will be available at `https://box.${SECRET_DOMAIN}`

**Validation Status:**
- YAML syntax validation pending
- Kubernetes manifest validation pending
- Flux build test pending

**Suggested Commit Message:**
```
feat(homebox): Add Homebox asset management application

- Deploy Homebox v0.10.3 to default namespace
- Configure persistent storage for asset data
- Disable registration and enable auto-increment IDs
- Use internal ingress with external DNS
- Adapted from TrueNAS export values
```

---

# Homepage Dashboard Deployment

## Homepage Deployment Complete

**Files Created:**
- `kubernetes/apps/default/homepage/ks.yaml` - Flux Kustomization CRD
- `kubernetes/apps/default/homepage/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/homepage/app/helmrelease.yaml` - HelmRelease with homepage configuration
- `kubernetes/apps/default/homepage/app/pvc.yaml` - PersistentVolumeClaim for config storage

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added homepage to resources list

**Key Features:**
- Uses GitOps patterns consistent with existing repository structure
- Adapted TrueNAS values to app-template chart format
- Kubernetes cluster mode enabled for service discovery
- RBAC configured for namespace/pod/ingress access
- Init container to set up default config files
- Persistent storage for configuration
- Internal ingress with external DNS annotation
- Security context with non-root user (568:568)

**Next Steps:**
Once committed and pushed, Flux will:
1. Reconcile the Kustomization and deploy homepage
2. Create PVC with ceph-block storage
3. Deploy homepage with default configuration
4. Make it available at `https://home.${SECRET_DOMAIN}`

**Suggested Commit Message:**
```
feat(homepage): Add homepage dashboard application

- Deploy homepage v0.8.12 to default namespace
- Configure Kubernetes cluster mode for service discovery
- Add RBAC for namespace, pod, and ingress access
- Use persistent storage for configuration
- Adapted from TrueNAS export values
```