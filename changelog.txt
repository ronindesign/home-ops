=== 2025-09-14 ===

# Media Management Stack Deployment

## Media Applications Deployment Complete

**Files Created:**
- `kubernetes/apps/media/overseerr/` - Complete Overseerr deployment (ks.yaml, app/*)
- `kubernetes/apps/media/radarr/` - Complete Radarr deployment with PostgreSQL
- `kubernetes/apps/media/sonarr/` - Complete Sonarr deployment with PostgreSQL
- `kubernetes/apps/media/prowlarr/` - Complete Prowlarr indexer management
- `kubernetes/apps/media/readarr/` - Complete Readarr deployment with PostgreSQL
- `kubernetes/apps/media/sabnzbd/` - Complete SABnzbd Usenet downloader

**Files Modified:**
- `kubernetes/apps/media/kustomization.yaml` - Added all six media apps to resources

**Key Components:**

### Overseerr Request Management
- **HelmRelease:** `overseerr` using bjw-s app-template
- **Image:** `ghcr.io/sct/overseerr:1.33.2`
- **URL:** `https://requests.${SECRET_DOMAIN}`
- **Storage:** 1Gi config PVC on ceph-block
- **Resources:** 10m CPU / 250Mi memory (requests), 1Gi memory (limits)

### Radarr Movie Automation
- **HelmRelease:** `radarr` with PostgreSQL integration
- **Image:** `ghcr.io/onedr0p/radarr:5.4.6.8723`
- **URL:** `https://movies.${SECRET_DOMAIN}`
- **Storage:** 10Gi config PVC + NFS media mount
- **Database:** PostgreSQL with postgres-init container
- **Dependencies:** Prowlarr for indexer management

### Sonarr TV Automation
- **HelmRelease:** `sonarr` with PostgreSQL integration
- **Image:** `ghcr.io/onedr0p/sonarr:4.0.4.1491`
- **URL:** `https://tv.${SECRET_DOMAIN}`
- **Storage:** 10Gi config PVC + NFS media mount
- **Database:** PostgreSQL with postgres-init container
- **Dependencies:** Prowlarr for indexer management

### Prowlarr Indexer Management
- **HelmRelease:** `prowlarr` centralized indexer hub
- **Image:** `ghcr.io/onedr0p/prowlarr-develop:1.16.2.4435`
- **URL:** `https://indexers.${SECRET_DOMAIN}`
- **Storage:** 1Gi config PVC on ceph-block
- **Database:** PostgreSQL with postgres-init container

### Readarr Book Automation
- **HelmRelease:** `readarr` with PostgreSQL integration
- **Image:** `ghcr.io/onedr0p/readarr-develop:0.3.23.2506`
- **URL:** `https://books.${SECRET_DOMAIN}`
- **Storage:** 10Gi config PVC + NFS media mount
- **Database:** PostgreSQL with postgres-init container
- **Dependencies:** Prowlarr for indexer management

### SABnzbd Usenet Downloader
- **HelmRelease:** `sabnzbd` download client
- **Image:** `ghcr.io/onedr0p/sabnzbd:4.2.3`
- **URL:** `https://downloads.${SECRET_DOMAIN}`
- **Storage:** 1Gi config PVC + NFS media mount
- **Resources:** 10m CPU / 250Mi memory (requests), 8Gi memory (limits)

### Shared Configuration
- **NFS Media Storage:** Shared mount at `/media` from `${NAS_IP}:/mnt/storage/media`
- **External Secrets:** OnePassword integration for API keys and credentials
- **Database:** All *arr apps use PostgreSQL via CloudNativePG
- **Ingress:** Internal class with external-dns annotations
- **Dependencies:** Rook-Ceph for storage, Prowlarr for indexers

**External Secrets Required (OnePassword):**
- `media` vault: Shared media credentials
- `radarr` vault: `RADARR_API_KEY`, database credentials
- `sonarr` vault: `SONARR_API_KEY`, database credentials
- `prowlarr` vault: `PROWLARR_API_KEY`, database credentials
- `readarr` vault: `READARR_API_KEY`, database credentials
- `sabnzbd` vault: API key and server credentials

**Suggested Commit Message:**
```
feat(media): Deploy complete media management stack

- Add Overseerr for content request management
- Add Radarr for automated movie downloads
- Add Sonarr for automated TV show downloads
- Add Prowlarr for centralized indexer management
- Add Readarr for automated book/audiobook downloads
- Add SABnzbd for Usenet download handling
- Configure shared NFS media storage across all apps
- Integrate with PostgreSQL and OnePassword secrets
```

---

# Default Namespace Applications Deployment

## Homarr, n8n, and PhotoPrism Deployment Complete

**Files Created:**
- `kubernetes/apps/default/homarr/` - Complete Homarr dashboard deployment
- `kubernetes/apps/default/n8n/` - Complete n8n workflow automation
- `kubernetes/apps/default/photoprism/` - Complete PhotoPrism photo management

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added all three apps to resources

**Key Components:**

### Homarr Dashboard
- **HelmRelease:** `homarr` using bjw-s app-template
- **Image:** `ghcr.io/homarr-labs/homarr:v1.0.0`
- **URL:** `https://dash.${SECRET_DOMAIN}`
- **Database:** PostgreSQL with postgres-init container
- **Storage:** Dual PVCs for config (1Gi) and data (1Gi)
- **Resources:** 10m CPU / 100Mi memory (requests), 500Mi memory (limits)

### n8n Workflow Automation
- **HelmRelease:** `n8n` with comprehensive environment configuration
- **Image:** `n8nio/n8n:1.73.1`
- **URL:** `https://auto.${SECRET_DOMAIN}`
- **Database:** PostgreSQL for workflows and credentials
- **Queue:** Dragonfly Redis for background tasks
- **Storage:** 10Gi data PVC + EmptyDir for logs
- **SMTP:** Full email integration for notifications
- **Resources:** 100m CPU / 256Mi memory (requests), 2Gi memory (limits)

### PhotoPrism Photo Management
- **HelmRelease:** `photoprism` with multi-volume configuration
- **Image:** `photoprism/photoprism:241128`
- **URL:** `https://photos.${SECRET_DOMAIN}`
- **Database:** PostgreSQL for metadata and search
- **Storage:**
  - Assets: 50Gi for app data/cache
  - Originals: 500Gi for photo storage
  - Import: 100Gi for staging
  - Temp: EmptyDir for processing
- **Resources:** 100m CPU / 512Mi memory (requests), 4Gi memory (limits)
- **Security:** Non-root user (568:568) with proper permissions

**Dependencies:**
- All apps require `rook-ceph-cluster` for storage
- Database apps require `cloudnative-pg-cluster`
- n8n uses Dragonfly for Redis functionality

**Suggested Commit Message:**
```
feat(apps): Deploy Homarr, n8n, and PhotoPrism applications

- Add Homarr dashboard with PostgreSQL backend
- Add n8n workflow automation with Redis queue support
- Add PhotoPrism photo management with 650Gi storage
- Configure external secrets and persistent volumes
- Set up ingress rules for all three applications
```

---

=== 2025-09-14 ===

# PhotoPrism Photo Management Deployment

## PhotoPrism Deployment Complete

**Files Created:**
- `kubernetes/apps/default/photoprism/ks.yaml` - Flux Kustomization for PhotoPrism
- `kubernetes/apps/default/photoprism/app/kustomization.yaml` - App-level resource aggregator
- `kubernetes/apps/default/photoprism/app/helmrelease.yaml` - PhotoPrism HelmRelease configuration
- `kubernetes/apps/default/photoprism/app/externalsecret.yaml` - External secrets configuration
- `kubernetes/apps/default/photoprism/app/pvc.yaml` - Persistent volume claims for storage

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added photoprism to namespace resources

**Key Components:**

### PhotoPrism Application
- **HelmRelease:** `photoprism` using bjw-s app-template
- **Image:** `photoprism/photoprism:241128@sha256:20e8b8f28c8d1a6a7d982d8b15fa9b325b5529ddce1e5ac3c1cfa7c7b9e3a7b7`
- **URL:** `https://photos.${SECRET_DOMAIN}`
- **Resources:** 100m CPU / 512Mi memory (requests), 4Gi memory (limits)

### Database Configuration
- **PostgreSQL:** Connected to `postgres-rw.database.svc.cluster.local:5432`
- **Database:** `photoprism` database with dedicated user credentials
- **Init Container:** postgres-init for automatic database creation

### Storage & Persistence
- **Assets Volume:** 50Gi PVC on ceph-block storage class for app data/cache
- **Originals Volume:** 500Gi PVC on ceph-block for photo storage
- **Import Volume:** 100Gi PVC on ceph-block for import staging
- **Temp Directory:** EmptyDir volume for temporary processing
- **Total Storage:** 650Gi persistent + temp space

### External Secrets Required (OnePassword)
- `photoprism_postgres_user` - Database username
- `photoprism_postgres_password` - Database password
- `photoprism_admin_password` - Admin user password
- `cloudnative_pg_password` - Database superuser password

### Features Configuration
- **Admin User:** `admin` with secure password from secrets
- **Photo Management:** Originals, import, and processing paths configured
- **Database Integration:** PostgreSQL for metadata and search indexing
- **Security Context:** Non-root user (568:568) with proper permissions
- **Path Configuration:** Dedicated paths for storage, cache, config, and backup

**Dependencies:**
- Requires `rook-ceph-cluster` for persistent storage
- Requires `cloudnative-pg-cluster` for PostgreSQL database
- Uses OnePassword Connect for secure credential management

**Suggested Commit Message:**
```
feat(photoprism): Add PhotoPrism photo management system

- Deploy PhotoPrism latest (241128) to default namespace
- Configure 650Gi total storage across three PVCs
- Integrate with PostgreSQL database and OnePassword secrets
- Enable photo management with import/originals/processing workflows
- Add dependency on rook-ceph-cluster for storage
```

---

# n8n Workflow Automation Deployment

## n8n Deployment Complete

**Files Created:**
- `kubernetes/apps/default/n8n/ks.yaml` - Flux Kustomization for n8n
- `kubernetes/apps/default/n8n/app/kustomization.yaml` - App-level resource aggregator
- `kubernetes/apps/default/n8n/app/helmrelease.yaml` - n8n HelmRelease configuration
- `kubernetes/apps/default/n8n/app/externalsecret.yaml` - External secrets configuration
- `kubernetes/apps/default/n8n/app/pvc.yaml` - Persistent volume claim for data

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added n8n to namespace resources

**Key Components:**

### n8n Application
- **HelmRelease:** `n8n` using bjw-s app-template (v3.7.3)
- **Image:** `n8nio/n8n:1.73.1`
- **URL:** `https://auto.${SECRET_DOMAIN}`
- **Resources:** 100m CPU / 256Mi memory (requests), 2Gi memory (limits)

### Database & Queue Configuration
- **PostgreSQL:** Connected to `postgres-rw.database.svc.cluster.local:5432`
- **Database:** `n8n` database with dedicated user credentials
- **Redis Queue:** Using Dragonfly at `dragonfly.database.svc.cluster.local:6379`
- **Init Container:** postgres-init for automatic database creation

### Storage & Persistence
- **Data Volume:** 10Gi PVC on ceph-block storage class
- **Mount Path:** `/data` for workflows, credentials, and configurations
- **Logs:** EmptyDir volume at `/data/logs` for application logs

### External Secrets Required (1Password)
- `n8n_postgres_user` - Database username
- `n8n_postgres_password` - Database password
- `n8n_encryption_key` - 32-character encryption key (CRITICAL - never change after setup)
- `n8n_smtp_host` - SMTP server hostname
- `n8n_smtp_port` - SMTP port (465 for SSL, 587 for TLS)
- `n8n_smtp_user` - SMTP username
- `n8n_smtp_pass` - SMTP password
- `n8n_smtp_sender` - Sender email/name

### Features Configuration
- **Workflow automation** with webhook support
- **SMTP email** integration for notifications
- **User management** enabled with email templates
- **Templates library** enabled for quick workflow creation
- **Diagnostics** and version notifications disabled
- **Onboarding flow** disabled for experienced users

**Dependencies:**
- Requires `rook-ceph-cluster` for storage
- Requires `cloudnative-pg-cluster` for database
- Uses Dragonfly for Redis queue functionality

=== 2025-09-12 ===

# Dragonfly Database Deployment

## Dragonfly Deployment Complete

**Files Created:**
- `kubernetes/components/repos/dragonfly/` - HelmRepository component for DragonflyDB operator
- `kubernetes/apps/database/dragonfly/ks.yaml` - Dual Kustomization (operator + cluster)
- `kubernetes/apps/database/dragonfly/operator/app/kustomization.yaml` - Operator app-level manifest
- `kubernetes/apps/database/dragonfly/operator/app/helmrelease.yaml` - Operator HelmRelease configuration
- `kubernetes/apps/database/dragonfly/cluster/app/kustomization.yaml` - Cluster app-level manifest
- `kubernetes/apps/database/dragonfly/cluster/app/cluster.yaml` - Dragonfly custom resource

**Files Modified:**
- `kubernetes/apps/database/kustomization.yaml` - Added dragonfly HelmRepository component and enabled dragonfly deployment
- `kubernetes/apps/default/paperless-ngx/app/externalsecret.yaml` - Updated Redis URL to use Dragonfly service

**Key Components:**

### Dragonfly Operator
- **HelmRelease:** `dragonfly-operator` (v1.2.1)
- **Chart:** `dragonfly-operator` from official DragonflyDB repository (`https://dragonflydb.github.io/dragonfly-operator`)
- **Resources:** 100m CPU / 128Mi memory (requests), 500m CPU / 512Mi memory (limits)
- **Deployment:** Single replica operator managing Dragonfly clusters

### Dragonfly Cluster
- **Custom Resource:** `Dragonfly` kind with name `dragonfly`
- **Image:** `ghcr.io/dragonflydb/dragonfly:v1.23.1`
- **Configuration:**
  - 3 replicas for high availability
  - 2Gi memory limit with 1000m CPU
  - 2 proactor threads for performance
  - Emulated cluster mode for Redis compatibility
  - Default service on port 6379

### Paperless-NGX Integration
- **Redis URL:** `redis://dragonfly.database.svc.cluster.local:6379/0`
- **Service Discovery:** Cross-namespace communication (default → database)
- **Compatibility:** Full Redis protocol compatibility with DragonflyDB
- **Performance:** High-performance alternative to Redis for background tasks and caching

**Deployment Order:**
1. **Dragonfly Operator** deploys first via HelmRelease
2. **Dragonfly Cluster** waits for operator readiness with health checks
3. **Paperless-NGX** connects to DragonflyDB service
4. **Background tasks** and caching now functional with improved performance

**Benefits:**
- Redis-compatible high-performance in-memory database
- Better memory efficiency than Redis
- Simplified deployment via Kubernetes operator
- Centralized caching service for multiple applications
- Improved paperless-ngx performance for document processing

**Suggested Commit Message:**
```
feat(dragonfly): Add DragonflyDB as Redis-compatible database service

- Deploy DragonflyDB operator v1.2.1 to database namespace
- Create 3-replica Dragonfly cluster with 2Gi memory allocation
- Add HelmRepository component for DragonflyDB operator charts
- Configure paperless-ngx to use Dragonfly instead of embedded Redis
- Enable cross-namespace service discovery for database services
```

---

# Paperless-NGX Document Management System Deployment

## Paperless-NGX Deployment Complete

**Files Created:**
- `kubernetes/apps/default/paperless-ngx/ks.yaml` - Flux Kustomization CRD with rook-ceph dependency
- `kubernetes/apps/default/paperless-ngx/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/paperless-ngx/app/helmrelease.yaml` - HelmRelease with paperless-ngx v2.8.6
- `kubernetes/apps/default/paperless-ngx/app/pvc.yaml` - Three rook-ceph PVCs (data: 50Gi, media: 50Gi, consume: 10Gi)
- `kubernetes/apps/default/paperless-ngx/app/externalsecret.yaml` - OnePassword integration for secrets

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added paperless-ngx to resources list

**Key Features:**
- Deployed paperless-ngx v2.8.6 for document management
- Configured rook-ceph storage with total 110Gi capacity (data: 50Gi, media: 50Gi, consume: 10Gi)
- PostgreSQL database integration via CloudNativePG
- Redis support for background tasks and caching
- OCR with English language support enabled
- External secrets integration with OnePassword for secure credential management
- Internal ingress configured at `docs.${SECRET_DOMAIN}`
- Resource allocation: 1000m CPU request, 256Mi-2Gi memory
- Security context optimized for document processing
- Auto-initialization of PostgreSQL database and user

**Configuration Details:**
- Admin user: `admin` with password from OnePassword
- Database: `paperless-ngx` on shared PostgreSQL cluster
- Redis connection for background task processing
- OCR languages configured for English documents
- Document consumption directory monitoring enabled
- Media and data directories with persistent storage

**OnePassword Requirements:**
- `paperless-ngx` vault: `PAPERLESS_SECRET_KEY`, `PAPERLESS_ADMIN_PASSWORD`, `PAPERLESS_POSTGRES_USER`, `PAPERLESS_POSTGRES_PASS`
- `cloudnative-pg` vault: Database initialization credentials

**Suggested Commit Message:**
```
feat(paperless-ngx): Add document management system

- Deploy paperless-ngx v2.8.6 to default namespace
- Configure rook-ceph storage with 110Gi total capacity
- Integrate with PostgreSQL and Redis via external secrets
- Enable internal ingress with SECRET_DOMAIN variable
- Add dependency on rook-ceph-cluster for storage
```

---

# Homebox Asset Management Deployment

## Homebox Deployment Complete

**Files Created:**
- `kubernetes/apps/default/homebox/ks.yaml` - Flux Kustomization CRD
- `kubernetes/apps/default/homebox/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/homebox/app/helmrelease.yaml` - HelmRelease with Homebox configuration
- `kubernetes/apps/default/homebox/app/pvc.yaml` - PersistentVolumeClaim for data storage

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added homebox to resources list (pending)

**Key Features:**
- Uses GitOps patterns consistent with existing repository structure
- Adapted TrueNAS export values (v0.10.3) to app-template chart format
- Configured Homebox environment variables for asset management
- Auto-increment asset IDs enabled
- Registration disabled for security
- Max upload size set to 10MB
- Persistent storage for data directory (/data)
- EmptyDir volume for config directory
- Internal ingress with external DNS annotation
- Security context with non-root user (568:568)
- Resource limits configured (500Mi memory limit)

**Next Steps:**
1. Update `kubernetes/apps/default/kustomization.yaml` to include homebox/ks.yaml
2. Commit and push changes
3. Flux will reconcile and deploy Homebox
4. Application will be available at `https://box.${SECRET_DOMAIN}`

**Validation Status:**
- YAML syntax validation pending
- Kubernetes manifest validation pending
- Flux build test pending

**Suggested Commit Message:**
```
feat(homebox): Add Homebox asset management application

- Deploy Homebox v0.10.3 to default namespace
- Configure persistent storage for asset data
- Disable registration and enable auto-increment IDs
- Use internal ingress with external DNS
- Adapted from TrueNAS export values
```

---

# Homepage Dashboard Deployment

## Homepage Deployment Complete

**Files Created:**
- `kubernetes/apps/default/homepage/ks.yaml` - Flux Kustomization CRD
- `kubernetes/apps/default/homepage/app/kustomization.yaml` - App-level Kustomize manifest
- `kubernetes/apps/default/homepage/app/helmrelease.yaml` - HelmRelease with homepage configuration
- `kubernetes/apps/default/homepage/app/pvc.yaml` - PersistentVolumeClaim for config storage

**Files Modified:**
- `kubernetes/apps/default/kustomization.yaml` - Added homepage to resources list

**Key Features:**
- Uses GitOps patterns consistent with existing repository structure
- Adapted TrueNAS values to app-template chart format
- Kubernetes cluster mode enabled for service discovery
- RBAC configured for namespace/pod/ingress access
- Init container to set up default config files
- Persistent storage for configuration
- Internal ingress with external DNS annotation
- Security context with non-root user (568:568)

**Next Steps:**
Once committed and pushed, Flux will:
1. Reconcile the Kustomization and deploy homepage
2. Create PVC with ceph-block storage
3. Deploy homepage with default configuration
4. Make it available at `https://home.${SECRET_DOMAIN}`

**Suggested Commit Message:**
```
feat(homepage): Add homepage dashboard application

- Deploy homepage v0.8.12 to default namespace
- Configure Kubernetes cluster mode for service discovery
- Add RBAC for namespace, pod, and ingress access
- Use persistent storage for configuration
- Adapted from TrueNAS export values
```